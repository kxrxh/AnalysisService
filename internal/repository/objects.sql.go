// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: objects.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getObjectByID = `-- name: GetObjectByID :one
SELECT id, id_analysis, file, m_h, m_s, m_v, m_r, m_g, m_b, l_avg, w_avg, brt_avg, r_avg, g_avg, b_avg, h_avg, s_avg, v_avg, h, s, v, h_m, s_m, v_m, r_m, g_m, b_m, brt_m, w_m, l_m, l, w, l_w, pr, sq, brt, r, g, b, solid, min_h, min_s, min_v, max_h, max_s, max_v, entropy, id_image, color_rhs, geometry, sq_sqcrl, hu1, hu2, hu3, hu4, hu5, hu6, class
FROM objects
WHERE id = $1
`

// Queries for the objects table
func (q *Queries) GetObjectByID(ctx context.Context, id int32) (Object, error) {
	row := q.db.QueryRow(ctx, getObjectByID, id)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.IDAnalysis,
		&i.File,
		&i.MH,
		&i.MS,
		&i.MV,
		&i.MR,
		&i.MG,
		&i.MB,
		&i.LAvg,
		&i.WAvg,
		&i.BrtAvg,
		&i.RAvg,
		&i.GAvg,
		&i.BAvg,
		&i.HAvg,
		&i.SAvg,
		&i.VAvg,
		&i.H,
		&i.S,
		&i.V,
		&i.HM,
		&i.SM,
		&i.VM,
		&i.RM,
		&i.GM,
		&i.BM,
		&i.BrtM,
		&i.WM,
		&i.LM,
		&i.L,
		&i.W,
		&i.LW,
		&i.Pr,
		&i.Sq,
		&i.Brt,
		&i.R,
		&i.G,
		&i.B,
		&i.Solid,
		&i.MinH,
		&i.MinS,
		&i.MinV,
		&i.MaxH,
		&i.MaxS,
		&i.MaxV,
		&i.Entropy,
		&i.IDImage,
		&i.ColorRhs,
		&i.Geometry,
		&i.SqSqcrl,
		&i.Hu1,
		&i.Hu2,
		&i.Hu3,
		&i.Hu4,
		&i.Hu5,
		&i.Hu6,
		&i.Class,
	)
	return i, err
}

const getObjectsByAnalysisID = `-- name: GetObjectsByAnalysisID :many
SELECT id, id_analysis, file, m_h, m_s, m_v, m_r, m_g, m_b, l_avg, w_avg, brt_avg, r_avg, g_avg, b_avg, h_avg, s_avg, v_avg, h, s, v, h_m, s_m, v_m, r_m, g_m, b_m, brt_m, w_m, l_m, l, w, l_w, pr, sq, brt, r, g, b, solid, min_h, min_s, min_v, max_h, max_s, max_v, entropy, id_image, color_rhs, geometry, sq_sqcrl, hu1, hu2, hu3, hu4, hu5, hu6, class
FROM objects
WHERE id_analysis = $1
ORDER BY id
`

func (q *Queries) GetObjectsByAnalysisID(ctx context.Context, analysisID pgtype.Int8) ([]Object, error) {
	rows, err := q.db.Query(ctx, getObjectsByAnalysisID, analysisID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Object{}
	for rows.Next() {
		var i Object
		if err := rows.Scan(
			&i.ID,
			&i.IDAnalysis,
			&i.File,
			&i.MH,
			&i.MS,
			&i.MV,
			&i.MR,
			&i.MG,
			&i.MB,
			&i.LAvg,
			&i.WAvg,
			&i.BrtAvg,
			&i.RAvg,
			&i.GAvg,
			&i.BAvg,
			&i.HAvg,
			&i.SAvg,
			&i.VAvg,
			&i.H,
			&i.S,
			&i.V,
			&i.HM,
			&i.SM,
			&i.VM,
			&i.RM,
			&i.GM,
			&i.BM,
			&i.BrtM,
			&i.WM,
			&i.LM,
			&i.L,
			&i.W,
			&i.LW,
			&i.Pr,
			&i.Sq,
			&i.Brt,
			&i.R,
			&i.G,
			&i.B,
			&i.Solid,
			&i.MinH,
			&i.MinS,
			&i.MinV,
			&i.MaxH,
			&i.MaxS,
			&i.MaxV,
			&i.Entropy,
			&i.IDImage,
			&i.ColorRhs,
			&i.Geometry,
			&i.SqSqcrl,
			&i.Hu1,
			&i.Hu2,
			&i.Hu3,
			&i.Hu4,
			&i.Hu5,
			&i.Hu6,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectsByIDs = `-- name: GetObjectsByIDs :many
SELECT
    o.id, o.id_analysis, o.file, o.m_h, o.m_s, o.m_v, o.m_r, o.m_g, o.m_b, o.l_avg, o.w_avg, o.brt_avg, o.r_avg, o.g_avg, o.b_avg, o.h_avg, o.s_avg, o.v_avg, o.h, o.s, o.v, o.h_m, o.s_m, o.v_m, o.r_m, o.g_m, o.b_m, o.brt_m, o.w_m, o.l_m, o.l, o.w, o.l_w, o.pr, o.sq, o.brt, o.r, o.g, o.b, o.solid, o.min_h, o.min_s, o.min_v, o.max_h, o.max_s, o.max_v, o.entropy, o.id_image, o.color_rhs, o.geometry, o.sq_sqcrl, o.hu1, o.hu2, o.hu3, o.hu4, o.hu5, o.hu6, o.class,
    a.id AS analysis_id,
    a.date_time AS analysis_date_time,
    a.product AS analysis_product,
    a.color_rhs AS analysis_color_rhs,
    a.id_user AS analysis_id_user,
    a.telegram_link AS analysis_telegram_link,
    a.text AS analysis_text,
    a.scale_mm_pixel AS analysis_scale_mm_pixel,
    a.mass AS analysis_mass,
    a.area AS analysis_area,
    a.r AS analysis_r,
    a.g AS analysis_g,
    a.b AS analysis_b,
    a.h AS analysis_h,
    a.s AS analysis_s,
    a.v AS analysis_v,
    a.lab_l AS analysis_lab_l,
    a.lab_a AS analysis_lab_a,
    a.lab_b AS analysis_lab_b,
    a.w AS analysis_w,
    a.l AS analysis_l,
    a.t AS analysis_t,
    a.id_analysis AS analysis_id_analysis
FROM objects o
LEFT JOIN analysis a ON o.id_analysis = a.id
WHERE o.id = ANY($1::int[])
`

type GetObjectsByIDsRow struct {
	ID                   int32            `json:"id"`
	IDAnalysis           pgtype.Int8      `json:"id_analysis"`
	File                 pgtype.Text      `json:"file"`
	MH                   pgtype.Float8    `json:"m_h"`
	MS                   pgtype.Float8    `json:"m_s"`
	MV                   pgtype.Float8    `json:"m_v"`
	MR                   pgtype.Float8    `json:"m_r"`
	MG                   pgtype.Float8    `json:"m_g"`
	MB                   pgtype.Float8    `json:"m_b"`
	LAvg                 pgtype.Float8    `json:"l_avg"`
	WAvg                 pgtype.Float8    `json:"w_avg"`
	BrtAvg               pgtype.Float8    `json:"brt_avg"`
	RAvg                 pgtype.Float8    `json:"r_avg"`
	GAvg                 pgtype.Float8    `json:"g_avg"`
	BAvg                 pgtype.Float8    `json:"b_avg"`
	HAvg                 pgtype.Float8    `json:"h_avg"`
	SAvg                 pgtype.Float8    `json:"s_avg"`
	VAvg                 pgtype.Float8    `json:"v_avg"`
	H                    pgtype.Float8    `json:"h"`
	S                    pgtype.Float8    `json:"s"`
	V                    pgtype.Float8    `json:"v"`
	HM                   pgtype.Float8    `json:"h_m"`
	SM                   pgtype.Float8    `json:"s_m"`
	VM                   pgtype.Float8    `json:"v_m"`
	RM                   pgtype.Float8    `json:"r_m"`
	GM                   pgtype.Float8    `json:"g_m"`
	BM                   pgtype.Float8    `json:"b_m"`
	BrtM                 pgtype.Float8    `json:"brt_m"`
	WM                   pgtype.Float8    `json:"w_m"`
	LM                   pgtype.Float8    `json:"l_m"`
	L                    pgtype.Float8    `json:"l"`
	W                    pgtype.Float8    `json:"w"`
	LW                   pgtype.Float8    `json:"l_w"`
	Pr                   pgtype.Float8    `json:"pr"`
	Sq                   pgtype.Float8    `json:"sq"`
	Brt                  pgtype.Float8    `json:"brt"`
	R                    pgtype.Float8    `json:"r"`
	G                    pgtype.Float8    `json:"g"`
	B                    pgtype.Float8    `json:"b"`
	Solid                pgtype.Float8    `json:"solid"`
	MinH                 pgtype.Float8    `json:"min_h"`
	MinS                 pgtype.Float8    `json:"min_s"`
	MinV                 pgtype.Float8    `json:"min_v"`
	MaxH                 pgtype.Float8    `json:"max_h"`
	MaxS                 pgtype.Float8    `json:"max_s"`
	MaxV                 pgtype.Float8    `json:"max_v"`
	Entropy              pgtype.Float8    `json:"entropy"`
	IDImage              pgtype.Int8      `json:"id_image"`
	ColorRhs             pgtype.Text      `json:"color_rhs"`
	Geometry             pgtype.Text      `json:"geometry"`
	SqSqcrl              pgtype.Float8    `json:"sq_sqcrl"`
	Hu1                  pgtype.Float8    `json:"hu1"`
	Hu2                  pgtype.Float8    `json:"hu2"`
	Hu3                  pgtype.Float8    `json:"hu3"`
	Hu4                  pgtype.Float8    `json:"hu4"`
	Hu5                  pgtype.Float8    `json:"hu5"`
	Hu6                  pgtype.Float8    `json:"hu6"`
	Class                pgtype.Text      `json:"class"`
	AnalysisID           pgtype.Int4      `json:"analysis_id"`
	AnalysisDateTime     pgtype.Timestamp `json:"analysis_date_time"`
	AnalysisProduct      pgtype.Text      `json:"analysis_product"`
	AnalysisColorRhs     pgtype.Text      `json:"analysis_color_rhs"`
	AnalysisIDUser       pgtype.Text      `json:"analysis_id_user"`
	AnalysisTelegramLink pgtype.Text      `json:"analysis_telegram_link"`
	AnalysisText         pgtype.Text      `json:"analysis_text"`
	AnalysisScaleMmPixel pgtype.Float8    `json:"analysis_scale_mm_pixel"`
	AnalysisMass         pgtype.Float8    `json:"analysis_mass"`
	AnalysisArea         pgtype.Float8    `json:"analysis_area"`
	AnalysisR            []byte           `json:"analysis_r"`
	AnalysisG            []byte           `json:"analysis_g"`
	AnalysisB            []byte           `json:"analysis_b"`
	AnalysisH            []byte           `json:"analysis_h"`
	AnalysisS            []byte           `json:"analysis_s"`
	AnalysisV            []byte           `json:"analysis_v"`
	AnalysisLabL         []byte           `json:"analysis_lab_l"`
	AnalysisLabA         []byte           `json:"analysis_lab_a"`
	AnalysisLabB         []byte           `json:"analysis_lab_b"`
	AnalysisW            []byte           `json:"analysis_w"`
	AnalysisL            []byte           `json:"analysis_l"`
	AnalysisT            []byte           `json:"analysis_t"`
	AnalysisIDAnalysis   pgtype.Text      `json:"analysis_id_analysis"`
}

func (q *Queries) GetObjectsByIDs(ctx context.Context, ids []int32) ([]GetObjectsByIDsRow, error) {
	rows, err := q.db.Query(ctx, getObjectsByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetObjectsByIDsRow{}
	for rows.Next() {
		var i GetObjectsByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.IDAnalysis,
			&i.File,
			&i.MH,
			&i.MS,
			&i.MV,
			&i.MR,
			&i.MG,
			&i.MB,
			&i.LAvg,
			&i.WAvg,
			&i.BrtAvg,
			&i.RAvg,
			&i.GAvg,
			&i.BAvg,
			&i.HAvg,
			&i.SAvg,
			&i.VAvg,
			&i.H,
			&i.S,
			&i.V,
			&i.HM,
			&i.SM,
			&i.VM,
			&i.RM,
			&i.GM,
			&i.BM,
			&i.BrtM,
			&i.WM,
			&i.LM,
			&i.L,
			&i.W,
			&i.LW,
			&i.Pr,
			&i.Sq,
			&i.Brt,
			&i.R,
			&i.G,
			&i.B,
			&i.Solid,
			&i.MinH,
			&i.MinS,
			&i.MinV,
			&i.MaxH,
			&i.MaxS,
			&i.MaxV,
			&i.Entropy,
			&i.IDImage,
			&i.ColorRhs,
			&i.Geometry,
			&i.SqSqcrl,
			&i.Hu1,
			&i.Hu2,
			&i.Hu3,
			&i.Hu4,
			&i.Hu5,
			&i.Hu6,
			&i.Class,
			&i.AnalysisID,
			&i.AnalysisDateTime,
			&i.AnalysisProduct,
			&i.AnalysisColorRhs,
			&i.AnalysisIDUser,
			&i.AnalysisTelegramLink,
			&i.AnalysisText,
			&i.AnalysisScaleMmPixel,
			&i.AnalysisMass,
			&i.AnalysisArea,
			&i.AnalysisR,
			&i.AnalysisG,
			&i.AnalysisB,
			&i.AnalysisH,
			&i.AnalysisS,
			&i.AnalysisV,
			&i.AnalysisLabL,
			&i.AnalysisLabA,
			&i.AnalysisLabB,
			&i.AnalysisW,
			&i.AnalysisL,
			&i.AnalysisT,
			&i.AnalysisIDAnalysis,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectsImages = `-- name: GetObjectsImages :many
SELECT id, id_analysis, file
FROM objects
WHERE id_object = ANY($1::int[])
`

type GetObjectsImagesRow struct {
	ID         int32       `json:"id"`
	IDAnalysis pgtype.Int8 `json:"id_analysis"`
	File       pgtype.Text `json:"file"`
}

func (q *Queries) GetObjectsImages(ctx context.Context, ids []int32) ([]GetObjectsImagesRow, error) {
	rows, err := q.db.Query(ctx, getObjectsImages, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetObjectsImagesRow{}
	for rows.Next() {
		var i GetObjectsImagesRow
		if err := rows.Scan(&i.ID, &i.IDAnalysis, &i.File); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectsImagesForAnalysis = `-- name: GetObjectsImagesForAnalysis :many
SELECT id, id_analysis, file
FROM objects
WHERE id_analysis = $1
`

type GetObjectsImagesForAnalysisRow struct {
	ID         int32       `json:"id"`
	IDAnalysis pgtype.Int8 `json:"id_analysis"`
	File       pgtype.Text `json:"file"`
}

func (q *Queries) GetObjectsImagesForAnalysis(ctx context.Context, idAnalysis pgtype.Int8) ([]GetObjectsImagesForAnalysisRow, error) {
	rows, err := q.db.Query(ctx, getObjectsImagesForAnalysis, idAnalysis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetObjectsImagesForAnalysisRow{}
	for rows.Next() {
		var i GetObjectsImagesForAnalysisRow
		if err := rows.Scan(&i.ID, &i.IDAnalysis, &i.File); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectsMetadata = `-- name: GetObjectsMetadata :many
SELECT id, id_analysis, m_h, m_s, m_v, m_r, m_g, m_b, l_avg, w_avg, brt_avg, r_avg, g_avg, b_avg, h_avg, s_avg, v_avg, h, s, v, h_m, s_m, v_m, r_m, g_m, b_m, brt_m, w_m, l_m, l, w, l_w, pr, sq, brt, r, g, b, solid, min_h, min_s, min_v, max_h, max_s, max_v, entropy, id_image, color_rhs, geometry, sq_sqcrl, hu1, hu2, hu3, hu4, hu5, hu6
FROM objects
WHERE id_object = ANY($1::int[])
`

type GetObjectsMetadataRow struct {
	ID         int32         `json:"id"`
	IDAnalysis pgtype.Int8   `json:"id_analysis"`
	MH         pgtype.Float8 `json:"m_h"`
	MS         pgtype.Float8 `json:"m_s"`
	MV         pgtype.Float8 `json:"m_v"`
	MR         pgtype.Float8 `json:"m_r"`
	MG         pgtype.Float8 `json:"m_g"`
	MB         pgtype.Float8 `json:"m_b"`
	LAvg       pgtype.Float8 `json:"l_avg"`
	WAvg       pgtype.Float8 `json:"w_avg"`
	BrtAvg     pgtype.Float8 `json:"brt_avg"`
	RAvg       pgtype.Float8 `json:"r_avg"`
	GAvg       pgtype.Float8 `json:"g_avg"`
	BAvg       pgtype.Float8 `json:"b_avg"`
	HAvg       pgtype.Float8 `json:"h_avg"`
	SAvg       pgtype.Float8 `json:"s_avg"`
	VAvg       pgtype.Float8 `json:"v_avg"`
	H          pgtype.Float8 `json:"h"`
	S          pgtype.Float8 `json:"s"`
	V          pgtype.Float8 `json:"v"`
	HM         pgtype.Float8 `json:"h_m"`
	SM         pgtype.Float8 `json:"s_m"`
	VM         pgtype.Float8 `json:"v_m"`
	RM         pgtype.Float8 `json:"r_m"`
	GM         pgtype.Float8 `json:"g_m"`
	BM         pgtype.Float8 `json:"b_m"`
	BrtM       pgtype.Float8 `json:"brt_m"`
	WM         pgtype.Float8 `json:"w_m"`
	LM         pgtype.Float8 `json:"l_m"`
	L          pgtype.Float8 `json:"l"`
	W          pgtype.Float8 `json:"w"`
	LW         pgtype.Float8 `json:"l_w"`
	Pr         pgtype.Float8 `json:"pr"`
	Sq         pgtype.Float8 `json:"sq"`
	Brt        pgtype.Float8 `json:"brt"`
	R          pgtype.Float8 `json:"r"`
	G          pgtype.Float8 `json:"g"`
	B          pgtype.Float8 `json:"b"`
	Solid      pgtype.Float8 `json:"solid"`
	MinH       pgtype.Float8 `json:"min_h"`
	MinS       pgtype.Float8 `json:"min_s"`
	MinV       pgtype.Float8 `json:"min_v"`
	MaxH       pgtype.Float8 `json:"max_h"`
	MaxS       pgtype.Float8 `json:"max_s"`
	MaxV       pgtype.Float8 `json:"max_v"`
	Entropy    pgtype.Float8 `json:"entropy"`
	IDImage    pgtype.Int8   `json:"id_image"`
	ColorRhs   pgtype.Text   `json:"color_rhs"`
	Geometry   pgtype.Text   `json:"geometry"`
	SqSqcrl    pgtype.Float8 `json:"sq_sqcrl"`
	Hu1        pgtype.Float8 `json:"hu1"`
	Hu2        pgtype.Float8 `json:"hu2"`
	Hu3        pgtype.Float8 `json:"hu3"`
	Hu4        pgtype.Float8 `json:"hu4"`
	Hu5        pgtype.Float8 `json:"hu5"`
	Hu6        pgtype.Float8 `json:"hu6"`
}

func (q *Queries) GetObjectsMetadata(ctx context.Context, ids []int32) ([]GetObjectsMetadataRow, error) {
	rows, err := q.db.Query(ctx, getObjectsMetadata, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetObjectsMetadataRow{}
	for rows.Next() {
		var i GetObjectsMetadataRow
		if err := rows.Scan(
			&i.ID,
			&i.IDAnalysis,
			&i.MH,
			&i.MS,
			&i.MV,
			&i.MR,
			&i.MG,
			&i.MB,
			&i.LAvg,
			&i.WAvg,
			&i.BrtAvg,
			&i.RAvg,
			&i.GAvg,
			&i.BAvg,
			&i.HAvg,
			&i.SAvg,
			&i.VAvg,
			&i.H,
			&i.S,
			&i.V,
			&i.HM,
			&i.SM,
			&i.VM,
			&i.RM,
			&i.GM,
			&i.BM,
			&i.BrtM,
			&i.WM,
			&i.LM,
			&i.L,
			&i.W,
			&i.LW,
			&i.Pr,
			&i.Sq,
			&i.Brt,
			&i.R,
			&i.G,
			&i.B,
			&i.Solid,
			&i.MinH,
			&i.MinS,
			&i.MinV,
			&i.MaxH,
			&i.MaxS,
			&i.MaxV,
			&i.Entropy,
			&i.IDImage,
			&i.ColorRhs,
			&i.Geometry,
			&i.SqSqcrl,
			&i.Hu1,
			&i.Hu2,
			&i.Hu3,
			&i.Hu4,
			&i.Hu5,
			&i.Hu6,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectsMetadataForAnalysis = `-- name: GetObjectsMetadataForAnalysis :many
SELECT id, id_analysis, m_h, m_s, m_v, m_r, m_g, m_b, l_avg, w_avg, brt_avg, r_avg, g_avg, b_avg, h_avg, s_avg, v_avg, h, s, v, h_m, s_m, v_m, r_m, g_m, b_m, brt_m, w_m, l_m, l, w, l_w, pr, sq, brt, r, g, b, solid, min_h, min_s, min_v, max_h, max_s, max_v, entropy, id_image, color_rhs, geometry, sq_sqcrl, hu1, hu2, hu3, hu4, hu5, hu6
FROM objects
WHERE id_analysis = $1
`

type GetObjectsMetadataForAnalysisRow struct {
	ID         int32         `json:"id"`
	IDAnalysis pgtype.Int8   `json:"id_analysis"`
	MH         pgtype.Float8 `json:"m_h"`
	MS         pgtype.Float8 `json:"m_s"`
	MV         pgtype.Float8 `json:"m_v"`
	MR         pgtype.Float8 `json:"m_r"`
	MG         pgtype.Float8 `json:"m_g"`
	MB         pgtype.Float8 `json:"m_b"`
	LAvg       pgtype.Float8 `json:"l_avg"`
	WAvg       pgtype.Float8 `json:"w_avg"`
	BrtAvg     pgtype.Float8 `json:"brt_avg"`
	RAvg       pgtype.Float8 `json:"r_avg"`
	GAvg       pgtype.Float8 `json:"g_avg"`
	BAvg       pgtype.Float8 `json:"b_avg"`
	HAvg       pgtype.Float8 `json:"h_avg"`
	SAvg       pgtype.Float8 `json:"s_avg"`
	VAvg       pgtype.Float8 `json:"v_avg"`
	H          pgtype.Float8 `json:"h"`
	S          pgtype.Float8 `json:"s"`
	V          pgtype.Float8 `json:"v"`
	HM         pgtype.Float8 `json:"h_m"`
	SM         pgtype.Float8 `json:"s_m"`
	VM         pgtype.Float8 `json:"v_m"`
	RM         pgtype.Float8 `json:"r_m"`
	GM         pgtype.Float8 `json:"g_m"`
	BM         pgtype.Float8 `json:"b_m"`
	BrtM       pgtype.Float8 `json:"brt_m"`
	WM         pgtype.Float8 `json:"w_m"`
	LM         pgtype.Float8 `json:"l_m"`
	L          pgtype.Float8 `json:"l"`
	W          pgtype.Float8 `json:"w"`
	LW         pgtype.Float8 `json:"l_w"`
	Pr         pgtype.Float8 `json:"pr"`
	Sq         pgtype.Float8 `json:"sq"`
	Brt        pgtype.Float8 `json:"brt"`
	R          pgtype.Float8 `json:"r"`
	G          pgtype.Float8 `json:"g"`
	B          pgtype.Float8 `json:"b"`
	Solid      pgtype.Float8 `json:"solid"`
	MinH       pgtype.Float8 `json:"min_h"`
	MinS       pgtype.Float8 `json:"min_s"`
	MinV       pgtype.Float8 `json:"min_v"`
	MaxH       pgtype.Float8 `json:"max_h"`
	MaxS       pgtype.Float8 `json:"max_s"`
	MaxV       pgtype.Float8 `json:"max_v"`
	Entropy    pgtype.Float8 `json:"entropy"`
	IDImage    pgtype.Int8   `json:"id_image"`
	ColorRhs   pgtype.Text   `json:"color_rhs"`
	Geometry   pgtype.Text   `json:"geometry"`
	SqSqcrl    pgtype.Float8 `json:"sq_sqcrl"`
	Hu1        pgtype.Float8 `json:"hu1"`
	Hu2        pgtype.Float8 `json:"hu2"`
	Hu3        pgtype.Float8 `json:"hu3"`
	Hu4        pgtype.Float8 `json:"hu4"`
	Hu5        pgtype.Float8 `json:"hu5"`
	Hu6        pgtype.Float8 `json:"hu6"`
}

func (q *Queries) GetObjectsMetadataForAnalysis(ctx context.Context, idAnalysis pgtype.Int8) ([]GetObjectsMetadataForAnalysisRow, error) {
	rows, err := q.db.Query(ctx, getObjectsMetadataForAnalysis, idAnalysis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetObjectsMetadataForAnalysisRow{}
	for rows.Next() {
		var i GetObjectsMetadataForAnalysisRow
		if err := rows.Scan(
			&i.ID,
			&i.IDAnalysis,
			&i.MH,
			&i.MS,
			&i.MV,
			&i.MR,
			&i.MG,
			&i.MB,
			&i.LAvg,
			&i.WAvg,
			&i.BrtAvg,
			&i.RAvg,
			&i.GAvg,
			&i.BAvg,
			&i.HAvg,
			&i.SAvg,
			&i.VAvg,
			&i.H,
			&i.S,
			&i.V,
			&i.HM,
			&i.SM,
			&i.VM,
			&i.RM,
			&i.GM,
			&i.BM,
			&i.BrtM,
			&i.WM,
			&i.LM,
			&i.L,
			&i.W,
			&i.LW,
			&i.Pr,
			&i.Sq,
			&i.Brt,
			&i.R,
			&i.G,
			&i.B,
			&i.Solid,
			&i.MinH,
			&i.MinS,
			&i.MinV,
			&i.MaxH,
			&i.MaxS,
			&i.MaxV,
			&i.Entropy,
			&i.IDImage,
			&i.ColorRhs,
			&i.Geometry,
			&i.SqSqcrl,
			&i.Hu1,
			&i.Hu2,
			&i.Hu3,
			&i.Hu4,
			&i.Hu5,
			&i.Hu6,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
